import pygame
import time
import button
import os
import random
os.chdir('C:/Users/Akshat/Documents/Project/pythonProject/assets/')
# This calls the __init__ functions of every pygame module
pygame.init()
pygame.mixer.init()

# Load and play the background music
pygame.mixer.music.load("bg music.mp3")
#click_sound = pygame.mixer.Sound()
pygame.mixer.music.play(-1)  # -1 means loop indefinitely

# Setting screen size
screen_width = 1066
screen_height = 600
screen = pygame.display.set_mode((screen_width, screen_height))
pygame.display.set_caption("Minesweeper")
timer = pygame.time.Clock()

# bg images
bg_images = []
for i in range(1, 6):
    bg_image = pygame.image.load(f"bgs/{i}.png").convert_alpha()
    bg_images.append(bg_image)
    bg_width = bg_images[0].get_width()

# End Game Image
end = pygame.image.load(f"Gameover2.png").convert_alpha()
end = pygame.transform.scale(end, (550, 100))

clicked = ()
dug = set()

class TileFunction:

    def __init__(self, x, y, image, w, h):
        self.image = pygame.transform.scale(image, (w, h))
        self.rect = self.image.get_rect()
        self.rect.topleft = (x, y)
        self.state = "normal"
        self.is_mine = False
        self.adjacent_mines = 0
        # self.tile_blank = False

    def draw(self, surface, tiles_x, tiles_y):

        global clicked
        global clicks

        action = False

        # get mouse position

        pos = pygame.mouse.get_pos()

        # flag mouse over button

        if self.rect.collidepoint(pos):

            # Left Click!
            if pygame.mouse.get_pressed()[0] == 1 and self.state == "normal":
                clicks += 1
                print(clicks)

                tile_row = int(pos[1] // tile_size) + 1
                tile_col = int(pos[0] // tile_size) + 1

                clicked = (tile_row, tile_col)

                dug.add(clicked)

                if clicks == 0 or clicks == 1:  # Check if it's the first or second click
                    if self.is_mine or self.adjacent_mines > 0:
                        reset_grid()
                    else:
                        clear_grid(tile, dug)
                else:
                    if self.is_mine:
                        self.image = bomb_tile  # Change to bomb_tile if it's a mine
                    elif self.adjacent_mines > 0:
                        self.image = number_tiles[
                            self.adjacent_mines - 1]  # Change to number_tile based on adjacent mines.-1 is there to match the image from the list 'number_tiles'
                        dug.add(clicked)
                    elif self.adjacent_mines == 0:
                        clear_grid(tile, dug)

                self.image = pygame.transform.scale(self.image, (tile_size, tile_size))  # resizing the image
                self.state = "clicked"  # now can't click it again
                action = True

        # draw button on screen
        surface.blit(self.image, (self.rect.x + tiles_x, self.rect.y + tiles_y))

        return action


# Button images load
start_image = pygame.image.load('startgreen1.png')
difficulty_image = pygame.image.load('difficultygreen.png')
help_image = pygame.image.load('helpgreen.png')
try_again_image = pygame.image.load('try again.png')
exit_image = pygame.image.load('Exit.png')
title_image = pygame.image.load('title 4.png')

# Creating button instances
start_button = button.Button(screen_width * 0.5, screen_height * 0.43, start_image, 0.18)
difficulty_button = button.Button(screen_width * 0.5, screen_height * 0.57, difficulty_image, 0.27)
help_button = button.Button(screen_width * 0.5, screen_height * 0.71, help_image, 0.2925)
title = button.Title(screen_width * 0.5, screen_height * 0.17, title_image, 0.5)

num = 0
correct_flag = 0

end_screen = pygame.Surface((screen_width, screen_height), pygame.SRCALPHA)  # clear secondary background.
bg_screen = pygame.Surface((screen_width, screen_height))
# Drawing the the animated surface, Credits to the youtube video that showed me how, can be found in the documents.
def draw_bg(surface):
    global num
    # surface.fill((255, 255, 255))

    if num > -bg_width:
        for x in range(5):
            speed = 1
            for i in bg_images:
                surface.blit(i,
                             (bg_width * x + num * speed, 0))  # making the screen draw attribute linked to the surface
                speed += 1
    else:
        num = 0
        for i in bg_images:
            surface.blit(i, (num, 0))  # making the functions dependent on the surface its blited to

    pygame.display.flip()


def convert_bomb_tile():
    for cube1 in tiles:
        if cube1.is_mine:
            cube1.image = bomb_tile
            cube1.image = pygame.transform.scale(cube1.image, (tile_size, tile_size))
            cube1.state = 'clicked'

        else:
            cube1.state = 'clicked'


game_over = False
show_end = False
loop_once_everygame = False
tile_print = True

i = 0
# Main Loop
running = True
while running:
    timer.tick(60)

    draw_bg(bg_screen)  # drawing the background onto the backscreen

    # blit a clear screen ontop of the previous screen,  this allows seperation between the moving screen and buttons preventing flickering
    screen.blit(bg_screen, (0, 0))

    num -= 1

    title.draw(screen)

    if start_button.draw(screen):  # Start Button Function
        print("START")

        pygame.time.delay(200)
        screen2 = pygame.display.set_mode((screen_width, screen_height))  # Creating the screen2
        pygame.display.set_caption('Minesweeper')
        screen2.fill("black")
        num_mines = 2

        clicks = 0
        resets = 0
        clicked = ()
        print(clicks)
        dug = set()

        tile_gap = 1  # this is how you can tell the tiles apart

        tile_size = 50
        tiles_per_row = 10

        width = tiles_per_row * (tile_size + tile_gap)

        normal_tile = pygame.image.load("tile1.png")
        bomb_tile = pygame.image.load("mine final.png")
        flag_tile = pygame.image.load("flag tile.png")
        clicked_tile = pygame.image.load("tile broken.png")
        number_tiles = [
            pygame.image.load("1 tile.png"),
            pygame.image.load("2 tile.png"),
            pygame.image.load("3 tile.png"),
            pygame.image.load("4 tile.png"),
            pygame.image.load("5 tile.png"),
            pygame.image.load("6 tile.png"),
            pygame.image.load("7 tile.png"),
            pygame.image.load("8 tile.png")
        ]

        tiles = []


        def clear_grid(tile, dug):
            row, col = tile.rect.y // (tile_size + tile_gap), tile.rect.x // (tile_size + tile_gap)
            dug.add((row, col))

            tile.state = "clicked"
            tile.image = pygame.transform.scale(clicked_tile, (tile_size, tile_size))

            for i in range(-1, 2):
                for j in range(-1, 2):
                    if 0 <= row + i < 10 and 0 <= col + j < 10:
                        index = (row + i) * 10 + (col + j)
                        neighbor_tile = tiles[index]

                        if neighbor_tile.adjacent_mines == 0 and (row + i, col + j) not in dug:
                            neighbor_tile.state = "clicked"
                            neighbor_tile.image = pygame.transform.scale(clicked_tile, (tile_size, tile_size))
                            clear_grid(neighbor_tile, dug)

                        elif neighbor_tile.adjacent_mines > 0:
                            neighbor_tile.state = "clicked"
                            neighbor_tile.image = pygame.transform.scale(number_tiles[neighbor_tile.adjacent_mines - 1],
                                                                         (tile_size, tile_size))

                        dug.add((row + i, col + j))


        mine_pos = []

        start_x = 0
        start_y = 0

        for row in range(10):
            for col in range(10):
                tile = TileFunction(start_x + col * (tile_size + tile_gap), start_y + row * (tile_size + tile_gap),
                                    normal_tile, tile_size, tile_size)
                tiles.append(tile)


        def mines_and_numbers(tiles, num_mines):
            mine_positions = random.sample([(row, col) for row in range(10) for col in range(10)], num_mines)

            for row, col in mine_positions:
                # Calculate the index of the tile based on row and col
                index = row * 10 + col
                tiles[index].is_mine = True

            print(mine_positions)

            for tile in tiles:
                # Check adjacent tiles and update adjacent_mines
                row, col = tile.rect.y // (tile_size + tile_gap), tile.rect.x // (
                            tile_size + tile_gap)  # Determines grid position of tiles

                for i in range(-1, 2):  # Creates a 3*3 grid
                    for j in range(-1, 2):
                        if 0 <= row + i < 10 and 0 <= col + j < 10:  # Checks to see if neighbouring tile is within the screen2 boundary
                            index = (row + i) * 10 + (col + j)  # Calculates index of neighbouring tile
                            if tiles[index].is_mine:  # Checks if neighbouring tile is a mine
                                tile.adjacent_mines += 1  # Increments current tile adjacent_mines attribute by 1


        def reset_grid():
            print("reset")

            global clicked
            global resets

            # Clear all mine flags and adjacent mine counts
            for tile in tiles:
                tile.is_mine = False
                tile.adjacent_mines = 0
                tile.state = "normal"
                tile.image = pygame.transform.scale(normal_tile, (tile_size, tile_size))  # resizing the image

            # Regenerate new mine positions and update adjacent mine counts
            mines_and_numbers(tiles, num_mines)

            resets += 1
            print("resets:", resets)

            # If there's a clicked tile, update its state and image
            if clicked:
                row, col = clicked
                index = (row - 1) * 10 + (col - 1)
                tile = tiles[index]
                if tile.is_mine:
                    reset_grid()
                elif tile.adjacent_mines > 0:
                    reset_grid()
                else:
                    clear_grid(tile, dug)
                tile.image = pygame.transform.scale(tile.image, (tile_size, tile_size))
                tile.state = "clicked"

            # Reset clicked variable
            clicked = ()


        # Randomly place mines and assort numbers
        mines_and_numbers(tiles, num_mines)

        right_click_pressed = False
        win_displayed = False
        # Calculate the position to center the tiles on the main screen
        tiles_x = (screen_width - width) // 2
        tiles_y = (screen_height - (tiles_per_row * (tile_size + tile_gap) - tile_gap)) // 2
        surface_tiles = pygame.Surface(width=400, height=400)
        surface_tiles.fill(255, 255, 255)
        screen.blit(surface_tiles, 200,200)

        # Tile while loop
        while tile_print == True:

            all_mines_revealed = all(tile.is_mine for tile in tiles)

            for tile in tiles:  # Draws the tiles onto the screen2
                action = tile.draw(surface_tiles, tiles_x, tiles_y)

            for event in pygame.event.get():

                if event.type == pygame.MOUSEBUTTONDOWN:
                    if event.button == 3:  # Right mouse button clicked
                        right_click_pressed = True  # Set the flag

                    if event.button == 1:
                        # print("left clicked")  # Check if any action was performed
                        for tile in tiles:
                            if tile.rect.collidepoint(event.pos):  # Check which tile was clicked
                                if tile.is_mine and clicks != 0:
                                    print("You clicked on a mine!")
                                    game_over = True
                                    for cube1 in tiles:
                                        print(all_mines_revealed)
                                        if cube1.is_mine:
                                            cube1.image = bomb_tile
                                            cube1.image = pygame.transform.scale(cube1.image, (tile_size, tile_size))
                                            cube1.state = 'clicked'

                                        else:
                                            cube1.state = 'clicked'

                                    pygame.display.flip()





                elif event.type == pygame.MOUSEBUTTONUP:
                    if event.button == 3:  # Right mouse button released
                        right_click_pressed = False  # Reset the flag

                if event.type == pygame.QUIT:
                    pygame.quit()
                    exit()

                if right_click_pressed:  # Check for right mouse button click
                    for tile in tiles:
                        if tile.rect.collidepoint(pygame.mouse.get_pos()):
                            if tile.state == "normal":  # Right-click to flag
                                tile.image = flag_tile  # changing the state to flag state
                                tile.image = pygame.transform.scale(tile.image,
                                                                    (tile_size, tile_size))  # resizing the image
                                tile.state = "flagged"  # Now it's flagged
                                print("flagged")
                                if tile.is_mine:
                                    correct_flag += 1
                                    print("correct flag:", correct_flag)
                            elif tile.state == "flagged":  # Right-click to unflag
                                tile.image = normal_tile  # changing state back to normal state
                                tile.image = pygame.transform.scale(tile.image,
                                                                    (tile_size, tile_size))  # resizing the image
                                tile.state = "normal"  # when the flag is unflagged
                                print("unflagged")
                                if tile.is_mine:
                                    correct_flag -= 1
                                    print("correct flag:", correct_flag)

                if correct_flag == num_mines and not win_displayed:  # Check if all flags are placed correctly
                    clicked_tiles = 0
                    for tile in tiles:
                        if tile.state == "clicked":
                            clicked_tiles += 1

                    remaining_tiles = len(tiles) - clicked_tiles
                    if remaining_tiles == num_mines:
                        convert_bomb_tile()

                        print("You win")
                        running = False
                        win_displayed = True

                        game_over == True

                pygame.display.flip()

                if game_over == True and loop_once_everygame == False:
                    # loop_once_everygame = True only allows one loop cause then the mines cannot be clicked again to make the backscreen more white

                    # Drawing onto the overlay surface
                    end_screen.fill((255, 255, 255, 160))  # Fill with semi-transparent white color

                    # Blit the overlay surface onto the main screen
                    screen.blit(end_screen, (0, 0))

                    # Drawing the screen buttons
                    screen.blit(end, (50, 0))
                    try_again_button = button.Button(300, 530, try_again_image, 0.5)
                    exit_button = button.Button(50, 530, exit_image, 0.5)

                    # exit buttons function
                    if exit_button.draw(screen2):
                        show_end = False
                        print("Exitting")
                        pygame.quit()
                        exit()

                    if try_again_button.draw(screen2):
                        print("START AGAIN")
                        game_over = False
                        # clear_grid()

                    # Did the user click the window to close the button
                    for event in pygame.event.get():
                        if event.type == pygame.QUIT:
                            pygame.quit()
                            exit()

                    pygame.display.flip()

    if difficulty_button.draw(screen):
        print("DIFFICULTY")


    if help_button.draw(screen):
        print("CANNOT HELP")

    pygame.display.flip()

    # Did the user click the window to close the button
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False

pygame.mixer.quit()
pygame.quit()
